# Routes

# Home page

GET           /                                 controllers.Application.index
GET           /submission/:id                   controllers.Application.submission(id: String)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                         controllers.Assets.at(path="/public", file)

# Conference interface
POST          /api/conferences                      controllers.api.Conferences.create()
GET           /api/conferences                      controllers.api.Conferences.list()
GET           /api/conferences/:id                  controllers.api.Conferences.get(id: String)
PUT           /api/conferences/:id                  controllers.api.Conferences.update(id: String)
DELETE        /api/conferences/:id                  controllers.api.Conferences.delete(id: String)
POST          /api/conferences/:id/abstracts        controllers.api.Abstracts.create(id: String)
GET           /api/conferences/:id/abstracts        controllers.api.Abstracts.listByConference(id: String)
PUT           /api/conferences/:id/owners           controllers.api.Conferences.setPermissions(id: String)
GET           /api/conferences/:id/owners           controllers.api.Conferences.getPermissions(id: String)

# Abstract interface
GET           /api/abstracts/:id                    controllers.api.Abstracts.get(id: String)
PUT           /api/abstracts/:id                    controllers.api.Abstracts.update(id: String)
DELETE        /api/abstracts/:id                    controllers.api.Abstracts.delete(id: String)
POST          /api/abstracts/:id/figure             controllers.api.Figures.upload(id: String)
GET           /api/abstracts/:id/figure             controllers.api.Figures.get(id: String)
GET           /api/abstracts/:id/figure/image       controllers.api.Figures.download(id: String)
DELETE        /api/abstracts/:id/figure             controllers.api.Figures.delete(id: String)
PUT           /api/abstracts/:id/owners             controllers.api.Abstracts.setPermissions(id: String)
GET           /api/abstracts/:id/owners             controllers.api.Abstracts.getPermissions(id: String)

# [...] maybe add more aliases

# Account interface
GET           /user                                 controllers.Application.showUserInfo
GET           /api/user/:id/abstracts               controllers.api.Abstracts.listByAccount(id: String)
GET           /secret                               controllers.Application.showSecret

# Login page
GET           /login                                securesocial.controllers.LoginPage.login
GET           /logout                               securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET           /signup                               securesocial.controllers.Registration.startSignUp
POST          /signup                               securesocial.controllers.Registration.handleStartSignUp
GET           /signup/:token                        securesocial.controllers.Registration.signUp(token)
POST          /signup/:token                        securesocial.controllers.Registration.handleSignUp(token)
GET           /reset                                securesocial.controllers.Registration.startResetPassword
POST          /reset                                securesocial.controllers.Registration.handleStartResetPassword
GET           /reset/:token                         securesocial.controllers.Registration.resetPassword(token)
POST          /reset/:token                         securesocial.controllers.Registration.handleResetPassword(token)
GET           /password                             securesocial.controllers.PasswordChange.page
POST          /password                             securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET           /authenticate/:provider               securesocial.controllers.ProviderController.authenticate(provider)
POST          /authenticate/:provider               securesocial.controllers.ProviderController.authenticateByPost(provider)
GET           /not-authorized                       securesocial.controllers.ProviderController.notAuthorized
